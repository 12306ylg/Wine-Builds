diff --git a/dlls/winex11.drv/desktop.c b/dlls/winex11.drv/desktop.c
index 5a9e0f59ae..d70b38b2b3 100644
--- a/dlls/winex11.drv/desktop.c
+++ b/dlls/winex11.drv/desktop.c
@@ -145,10 +145,7 @@ static LONG X11DRV_desktop_SetCurrentMode(int mode)
          */
     }
     TRACE("Resizing Wine desktop window to %dx%d\n", dd_modes[mode].width, dd_modes[mode].height);
-
-    desktop_width = dd_modes[mode].width;
-    desktop_height = dd_modes[mode].height;
-    X11DRV_DisplayDevices_Update( TRUE );
+    X11DRV_resize_desktop(dd_modes[mode].width, dd_modes[mode].height);
     return DISP_CHANGE_SUCCESSFUL;
 }
 
@@ -324,6 +321,39 @@ BOOL CDECL X11DRV_create_desktop( UINT width, UINT height )
     return TRUE;
 }
 
+
+struct desktop_resize_data
+{
+    RECT  old_virtual_rect;
+    RECT  new_virtual_rect;
+};
+
+static BOOL CALLBACK update_windows_on_desktop_resize( HWND hwnd, LPARAM lparam )
+{
+    struct x11drv_win_data *data;
+    struct desktop_resize_data *resize_data = (struct desktop_resize_data *)lparam;
+    int mask = 0;
+
+    if (!(data = get_win_data( hwnd ))) return TRUE;
+
+    /* update the full screen state */
+    update_net_wm_states( data );
+
+    if (resize_data->old_virtual_rect.left != resize_data->new_virtual_rect.left) mask |= CWX;
+    if (resize_data->old_virtual_rect.top != resize_data->new_virtual_rect.top) mask |= CWY;
+    if (mask && data->whole_window)
+    {
+        POINT pos = virtual_screen_to_root( data->whole_rect.left, data->whole_rect.top );
+        XWindowChanges changes;
+        changes.x = pos.x;
+        changes.y = pos.y;
+        XReconfigureWMWindow( data->display, data->whole_window, data->vis.screen, mask, &changes );
+    }
+    release_win_data( data );
+    if (hwnd == GetForegroundWindow()) clip_fullscreen_window( hwnd, TRUE );
+    return TRUE;
+}
+
 BOOL is_desktop_fullscreen(void)
 {
     RECT primary_rect = get_primary_monitor_rect();
@@ -367,34 +397,33 @@ static void update_desktop_fullscreen( unsigned int width, unsigned int height)
 /***********************************************************************
  *		X11DRV_resize_desktop
  */
-void X11DRV_resize_desktop( BOOL send_display_change )
+void X11DRV_resize_desktop( unsigned int width, unsigned int height )
 {
-    RECT primary_rect, virtual_rect;
     HWND hwnd = GetDesktopWindow();
-    INT width, height;
+    struct desktop_resize_data resize_data;
 
-    virtual_rect = get_virtual_screen_rect();
-    primary_rect = get_primary_monitor_rect();
-    width = primary_rect.right;
-    height = primary_rect.bottom;
+    resize_data.old_virtual_rect = get_virtual_screen_rect();
+    desktop_width = width;
+    desktop_height = height;
+    X11DRV_DisplayDevices_Init( TRUE );
+    resize_data.new_virtual_rect = get_virtual_screen_rect();
 
     if (GetWindowThreadProcessId( hwnd, NULL ) != GetCurrentThreadId())
     {
-        SendMessageW( hwnd, WM_X11DRV_RESIZE_DESKTOP, 0, (LPARAM)send_display_change );
+        SendMessageW( hwnd, WM_X11DRV_RESIZE_DESKTOP, 0, MAKELPARAM( width, height ) );
     }
     else
     {
         TRACE( "desktop %p change to (%dx%d)\n", hwnd, width, height );
         update_desktop_fullscreen( width, height );
-        SetWindowPos( hwnd, 0, virtual_rect.left, virtual_rect.top,
-                      virtual_rect.right - virtual_rect.left, virtual_rect.bottom - virtual_rect.top,
+        SetWindowPos( hwnd, 0, resize_data.new_virtual_rect.left, resize_data.new_virtual_rect.top,
+                      resize_data.new_virtual_rect.right - resize_data.new_virtual_rect.left,
+                      resize_data.new_virtual_rect.bottom - resize_data.new_virtual_rect.top,
                       SWP_NOZORDER | SWP_NOACTIVATE | SWP_DEFERERASE );
         ungrab_clipping_window();
-
-        if (send_display_change)
-        {
-            SendMessageTimeoutW( HWND_BROADCAST, WM_DISPLAYCHANGE, screen_bpp, MAKELPARAM( width, height ),
-                                 SMTO_ABORTIFHUNG, 2000, NULL );
-        }
+        SendMessageTimeoutW( HWND_BROADCAST, WM_DISPLAYCHANGE, screen_bpp,
+                             MAKELPARAM( width, height ), SMTO_ABORTIFHUNG, 2000, NULL );
     }
+
+    EnumWindows( update_windows_on_desktop_resize, (LPARAM)&resize_data );
 }
diff --git a/dlls/winex11.drv/display.c b/dlls/winex11.drv/display.c
index daea434dab..4429cb8922 100644
--- a/dlls/winex11.drv/display.c
+++ b/dlls/winex11.drv/display.c
@@ -273,50 +273,6 @@ void X11DRV_DisplayDevices_RegisterEventHandlers(void)
         handler->register_event_handlers();
 }
 
-static BOOL CALLBACK update_windows_on_display_change(HWND hwnd, LPARAM lparam)
-{
-    struct x11drv_win_data *data;
-    UINT mask = (UINT)lparam;
-
-    if (!(data = get_win_data(hwnd)))
-        return TRUE;
-
-    /* update the full screen state */
-    update_net_wm_states(data);
-
-    if (mask && data->whole_window)
-    {
-        POINT pos = virtual_screen_to_root(data->whole_rect.left, data->whole_rect.top);
-        XWindowChanges changes;
-        changes.x = pos.x;
-        changes.y = pos.y;
-        XReconfigureWMWindow(data->display, data->whole_window, data->vis.screen, mask, &changes);
-    }
-    release_win_data(data);
-    if (hwnd == GetForegroundWindow())
-        clip_fullscreen_window(hwnd, TRUE);
-    return TRUE;
-}
-
-void X11DRV_DisplayDevices_Update(BOOL send_display_change)
-{
-    RECT old_virtual_rect, new_virtual_rect;
-    UINT mask = 0;
-
-    old_virtual_rect = get_virtual_screen_rect();
-    X11DRV_DisplayDevices_Init(TRUE);
-    new_virtual_rect = get_virtual_screen_rect();
-
-    /* Calculate XReconfigureWMWindow() mask */
-    if (old_virtual_rect.left != new_virtual_rect.left)
-        mask |= CWX;
-    if (old_virtual_rect.top != new_virtual_rect.top)
-        mask |= CWY;
-
-    X11DRV_resize_desktop(send_display_change);
-    EnumWindows(update_windows_on_display_change, (LPARAM)mask);
-}
-
 /* Initialize a GPU instance and return its GUID string in guid_string and driver value in driver parameter */
 static BOOL X11DRV_InitGpu(HDEVINFO devinfo, const struct x11drv_gpu *gpu, INT gpu_index, WCHAR *guid_string,
                            WCHAR *driver)
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index a16b835424..1c26934ca8 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -2744,7 +2744,7 @@ LRESULT CDECL X11DRV_WindowMessage( HWND hwnd, UINT msg, WPARAM wp, LPARAM lp )
         }
         return 0;
     case WM_X11DRV_RESIZE_DESKTOP:
-        X11DRV_resize_desktop( (BOOL)lp );
+        X11DRV_resize_desktop( LOWORD(lp), HIWORD(lp) );
         return 0;
     case WM_X11DRV_SET_CURSOR:
         if ((data = get_win_data( hwnd )))
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index ff0aeb7dab..98cab8947b 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -657,7 +657,7 @@ struct x11drv_mode_info
 };
 
 extern void X11DRV_init_desktop( Window win, unsigned int width, unsigned int height ) DECLSPEC_HIDDEN;
-extern void X11DRV_resize_desktop(BOOL) DECLSPEC_HIDDEN;
+extern void X11DRV_resize_desktop(unsigned int width, unsigned int height) DECLSPEC_HIDDEN;
 extern BOOL is_virtual_desktop(void) DECLSPEC_HIDDEN;
 extern BOOL is_desktop_fullscreen(void) DECLSPEC_HIDDEN;
 extern BOOL create_desktop_win_data( Window win ) DECLSPEC_HIDDEN;
@@ -755,7 +755,6 @@ struct x11drv_display_device_handler
 extern void X11DRV_DisplayDevices_SetHandler(const struct x11drv_display_device_handler *handler) DECLSPEC_HIDDEN;
 extern void X11DRV_DisplayDevices_Init(BOOL force) DECLSPEC_HIDDEN;
 extern void X11DRV_DisplayDevices_RegisterEventHandlers(void) DECLSPEC_HIDDEN;
-extern void X11DRV_DisplayDevices_Update(BOOL) DECLSPEC_HIDDEN;
 /* Display device handler used in virtual desktop mode */
 extern struct x11drv_display_device_handler desktop_handler DECLSPEC_HIDDEN;
 
diff --git a/dlls/winex11.drv/xrandr.c b/dlls/winex11.drv/xrandr.c
index 76e76806c5..95e4a5d6db 100644
--- a/dlls/winex11.drv/xrandr.c
+++ b/dlls/winex11.drv/xrandr.c
@@ -209,7 +209,7 @@ static LONG xrandr10_set_current_mode( int mode )
     if (stat == RRSetConfigSuccess)
     {
         xrandr_current_mode = mode;
-        X11DRV_DisplayDevices_Update( TRUE );
+        X11DRV_resize_desktop( dd_modes[mode].width, dd_modes[mode].height );
         return DISP_CHANGE_SUCCESSFUL;
     }
 
@@ -457,7 +457,7 @@ static LONG xrandr12_set_current_mode( int mode )
     }
 
     xrandr_current_mode = mode;
-    X11DRV_DisplayDevices_Update( TRUE );
+    X11DRV_resize_desktop( dd_modes[mode].width, dd_modes[mode].height );
     return DISP_CHANGE_SUCCESSFUL;
 }
 
@@ -1094,12 +1094,7 @@ static void xrandr14_free_monitors( struct x11drv_monitor *monitors )
 static BOOL xrandr14_device_change_handler( HWND hwnd, XEvent *event )
 {
     if (hwnd == GetDesktopWindow() && GetWindowThreadProcessId( hwnd, NULL ) == GetCurrentThreadId())
-    {
-        /* Don't send a WM_DISPLAYCHANGE message here because this event may be a result from
-         * ChangeDisplaySettings(). Otherwise, ChangeDisplaySettings() would send multiple
-         * WM_DISPLAYCHANGE messages instead of just one */
-        X11DRV_DisplayDevices_Update( FALSE );
-    }
+        X11DRV_DisplayDevices_Init( TRUE );
     return FALSE;
 }
 
diff --git a/dlls/winex11.drv/xvidmode.c b/dlls/winex11.drv/xvidmode.c
index a588454316..890dbc46c7 100644
--- a/dlls/winex11.drv/xvidmode.c
+++ b/dlls/winex11.drv/xvidmode.c
@@ -145,7 +145,7 @@ static LONG X11DRV_XF86VM_SetCurrentMode(int mode)
   XWarpPointer(gdi_display, None, DefaultRootWindow(gdi_display), 0, 0, 0, 0, 0, 0);
 #endif
   XSync(gdi_display, False);
-  X11DRV_DisplayDevices_Update( TRUE );
+  X11DRV_resize_desktop( real_xf86vm_modes[mode]->hdisplay, real_xf86vm_modes[mode]->vdisplay );
   return DISP_CHANGE_SUCCESSFUL;
 }
 
